{"version":3,"sources":["helpers/copy-command.js","components/CommandRow.jsx"],"names":["handleCopyCommand","text","copy","toast","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","useStyles","makeStyles","theme","inline","display","command","color","avatar","cursor","unSelectable","userSelect","filteredText","CommandRow","description","isLastItem","filterText","classes","ListItem","alignItems","Tooltip","title","TransitionComponent","Zoom","placement","arrow","ListItemAvatar","onClick","className","Avatar","alt","src","ListItemText","primary","highlightClassName","searchWords","split","autoEscape","textToHighlight","secondary","Divider","variant","component"],"mappings":"yQAgBeA,EAbW,SAAAC,GACxBC,IAAKD,GACLE,IAAMC,KAAK,4CAAmC,CAC5CC,SAAU,aACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,KCGRC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,OAAQ,CACNC,QAAS,UAEXC,QAAS,CACPC,MAAO,WAETC,OAAQ,CACNC,OAAQ,WAEVC,aAAc,CACZC,WAAY,QAEdC,aAAc,CACZL,MAAO,eA0DIM,UAtDI,SAAC,GAIb,IAAD,IAHJP,QAAWjB,EAGP,EAHOA,KAAMyB,EAGb,EAHaA,YACjBC,EAEI,EAFJA,WACAC,EACI,EADJA,WAEMC,EAAUhB,IAEhB,OACE,qCACE,eAACiB,EAAA,EAAD,CAAUC,WAAW,aAArB,UACE,cAACC,EAAA,EAAD,CACEC,MAAM,4BACNC,oBAAqBC,IACrBC,UAAU,MACVC,OAAK,EAJP,SAME,cAACC,EAAA,EAAD,CACEC,QAAS,kBAAMvC,EAAkBC,IACjCuC,UAAWX,EAAQT,OAFrB,SAIE,cAACqB,EAAA,EAAD,CAAQC,IAAI,OAAOC,IAAK,YAAxB,SACE,mBAAGH,UAAU,qBAInB,cAACI,EAAA,EAAD,CACEC,QACE,mBAAGL,UAAS,UAAKX,EAAQX,QAAb,YAAwBW,EAAQP,cAA5C,SACE,cAAC,IAAD,CACEwB,mBAAoBjB,EAAQL,aAC5BuB,YAAW,YAAMnB,EAAWoB,MAAM,MAClCC,YAAY,EACZC,gBAAiBjD,MAIvBkD,UACE,uBAAMX,UAAWX,EAAQP,aAAzB,UAAwCI,EAAxC,aAIJC,GAAc,cAACyB,EAAA,EAAD,CAASC,QAAQ,QAAQC,UAAU","file":"static/js/10.0ce161e7.chunk.js","sourcesContent":["import copy from 'copy-to-clipboard';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst handleCopyCommand = text => {\r\n  copy(text);\r\n  toast.info('ðŸ˜€ Command Copied to clipboard!', {\r\n    position: 'top-center',\r\n    autoClose: 2000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  });\r\n};\r\n\r\nexport default handleCopyCommand;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  ListItem,\r\n  Divider,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  Avatar,\r\n  Tooltip,\r\n  Zoom,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Highlighter from 'react-highlight-words';\r\nimport handleCopyCommand from '../helpers/copy-command';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  inline: {\r\n    display: 'inline',\r\n  },\r\n  command: {\r\n    color: '#52c4ff',\r\n  },\r\n  avatar: {\r\n    cursor: 'pointer',\r\n  },\r\n  unSelectable: {\r\n    userSelect: 'none',\r\n  },\r\n  filteredText: {\r\n    color: 'primary',\r\n  },\r\n}));\r\n\r\nconst CommandRow = ({\r\n  command: { text, description },\r\n  isLastItem,\r\n  filterText,\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <ListItem alignItems=\"flex-start\">\r\n        <Tooltip\r\n          title=\"Copy command to clipboard\"\r\n          TransitionComponent={Zoom}\r\n          placement=\"top\"\r\n          arrow\r\n        >\r\n          <ListItemAvatar\r\n            onClick={() => handleCopyCommand(text)}\r\n            className={classes.avatar}\r\n          >\r\n            <Avatar alt=\"Copy\" src={'dummy.jpg'}>\r\n              <i className=\"fa fa-copy\"></i>\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n        </Tooltip>\r\n        <ListItemText\r\n          primary={\r\n            <b className={`${classes.command} ${classes.unSelectable}`}>\r\n              <Highlighter\r\n                highlightClassName={classes.filteredText}\r\n                searchWords={[...filterText.split(' ')]}\r\n                autoEscape={true}\r\n                textToHighlight={text}\r\n              />\r\n            </b>\r\n          }\r\n          secondary={\r\n            <span className={classes.unSelectable}>{description} </span>\r\n          }\r\n        />\r\n      </ListItem>\r\n      {!isLastItem && <Divider variant=\"inset\" component=\"li\" />}\r\n    </>\r\n  );\r\n};\r\n\r\nCommandRow.propTypes = {\r\n  command: PropTypes.shape({\r\n    text: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  isLastItem: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default CommandRow;\r\n"],"sourceRoot":""}