{"version":3,"sources":["hooks/UseCommands.jsx","components/CommandsList.jsx"],"names":["UseCommands","category","Commands","CommandRow","React","lazy","CommandPagination","NoResults","useStyles","makeStyles","theme","root","width","backgroundColor","palette","background","paper","CommandsList","filterText","page","setPage","sort","classes","commands","useState","noOfCommandsPerPage","useEffect","filteredCommands","filter","text","toLowerCase","includes","a","b","allCommandsLength","length","currentPageCommands","splice","noOfPagesForPagination","parseInt","List","className","map","command","index","isLastItem","Boolean","uuid","handleChange","event","value","alertHeader","alertMessage"],"mappings":"ykUAMeA,EAJK,SAAAC,GAClB,OAAOC,EAASD,ICEZE,EAAaC,IAAMC,MAAK,kBAAM,wDAC9BC,EAAoBF,IAAMC,MAAK,kBAAM,iCACrCE,EAAYH,IAAMC,MAAK,kBAAM,iCAE7BG,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,MAAO,OAEPC,gBAAiBH,EAAMI,QAAQC,WAAWC,WAI/B,SAASC,EAAT,GAMX,IAAD,IALDhB,gBAKC,MALU,MAKV,EAJDiB,EAIC,EAJDA,WACAC,EAGC,EAHDA,KACAC,EAEC,EAFDA,QACAC,EACC,EADDA,KAEMC,EAAUd,IACVe,EAAWvB,EAAYC,GAF5B,EAG6BG,IAAMoB,SAAS,GAAtCC,EAHN,oBAODrB,IAAMsB,WAAU,WACdN,EAAQ,KACP,CAACA,IAEJ,IAAIO,EAAmBT,EACnB,YAAIK,GAAUK,QAAO,qBAAGC,KACjBC,cAAcC,SAASb,EAAWY,kBAFZ,YAIzBP,GAEK,OAATF,IAEAM,EADEN,EACiBM,EAAiBN,MAAK,SAACW,EAAGC,GAAJ,OACvCD,EAAEH,KAAKC,cAAgBG,EAAEJ,KAAKC,eAAiB,EAAI,KAGlCH,EAAiBN,MAAK,SAACW,EAAGC,GAAJ,OACvCA,EAAEJ,KAAKC,cAAgBE,EAAEH,KAAKC,eAAiB,EAAI,MAKzD,IAAMI,EAAoBP,EAAiBQ,OAErCC,EAAsBT,EAAiBU,QAC1ClB,EAAO,GAAKM,EACbA,GAGIa,EACJJ,EAAoBT,IAAwB,EAClB,IAAtBS,EACE,EACAK,SAASL,EAAoBT,GAC/Bc,SAASL,EAAoBT,GAAuB,EAE1D,OACE,mCACGW,EAAoBD,OAAS,EAC5B,qCACE,cAACK,EAAA,EAAD,CAAMC,UAAWnB,EAAQX,KAAzB,SACGyB,EAAoBM,KAAI,SAACC,EAASC,GAAV,OACvB,cAACzC,EAAD,CAEEwC,QAASA,EACTE,WAAYC,QAAQF,IAAUR,EAAoBD,OAAS,GAC3DjB,WAAYA,GAHP6B,oBAOX,cAACzC,EAAD,CACE0C,aAtDW,SAACC,EAAOC,GAC3B9B,EAAQ8B,IAsDA/B,KAAMA,EACNmB,uBAAwBA,OAI5B,cAAC/B,EAAD,CACE4C,YAAa,2BACbC,aACE","file":"static/js/7.89492348.chunk.js","sourcesContent":["import Commands from '../assets/data/Commands.json';\r\n\r\nconst UseCommands = category => {\r\n  return Commands[category];\r\n};\r\n\r\nexport default UseCommands;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport { v4 as uuid } from 'uuid';\r\nimport UseCommands from '../hooks/UseCommands';\r\nconst CommandRow = React.lazy(() => import('./CommandRow'));\r\nconst CommandPagination = React.lazy(() => import('./CommandPagination'));\r\nconst NoResults = React.lazy(() => import('./common/NoResults'));\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    // maxWidth: '90ch',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nexport default function CommandsList({\r\n  category = 'git',\r\n  filterText,\r\n  page,\r\n  setPage,\r\n  sort,\r\n}) {\r\n  const classes = useStyles();\r\n  const commands = UseCommands(category);\r\n  const [noOfCommandsPerPage] = React.useState(7);\r\n  const handleChange = (event, value) => {\r\n    setPage(value);\r\n  };\r\n  React.useEffect(() => {\r\n    setPage(1);\r\n  }, [setPage]);\r\n\r\n  let filteredCommands = filterText\r\n    ? [...commands].filter(({ text }) =>\r\n        text.toLowerCase().includes(filterText.toLowerCase()),\r\n      )\r\n    : [...commands];\r\n\r\n  if (sort !== null) {\r\n    if (sort) {\r\n      filteredCommands = filteredCommands.sort((a, b) =>\r\n        a.text.toLowerCase() < b.text.toLowerCase() ? -1 : 0,\r\n      );\r\n    } else {\r\n      filteredCommands = filteredCommands.sort((a, b) =>\r\n        b.text.toLowerCase() < a.text.toLowerCase() ? -1 : 0,\r\n      );\r\n    }\r\n  }\r\n\r\n  const allCommandsLength = filteredCommands.length;\r\n\r\n  const currentPageCommands = filteredCommands.splice(\r\n    (page - 1) * noOfCommandsPerPage,\r\n    noOfCommandsPerPage,\r\n  );\r\n\r\n  const noOfPagesForPagination =\r\n    allCommandsLength % noOfCommandsPerPage === 0\r\n      ? allCommandsLength === 0\r\n        ? 1\r\n        : parseInt(allCommandsLength / noOfCommandsPerPage)\r\n      : parseInt(allCommandsLength / noOfCommandsPerPage) + 1;\r\n\r\n  return (\r\n    <>\r\n      {currentPageCommands.length > 0 ? (\r\n        <>\r\n          <List className={classes.root}>\r\n            {currentPageCommands.map((command, index) => (\r\n              <CommandRow\r\n                key={uuid()}\r\n                command={command}\r\n                isLastItem={Boolean(index === currentPageCommands.length - 1)}\r\n                filterText={filterText}\r\n              />\r\n            ))}\r\n          </List>\r\n          <CommandPagination\r\n            handleChange={handleChange}\r\n            page={page}\r\n            noOfPagesForPagination={noOfPagesForPagination}\r\n          />\r\n        </>\r\n      ) : (\r\n        <NoResults\r\n          alertHeader={'Sorry, no results found!'}\r\n          alertMessage={\r\n            'Please check the spelling or try searching for something else'\r\n          }\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}